// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	ttlcache "github.com/jellydator/ttlcache/v3"
)

// TTLCacheService is an autogenerated mock type for the TTLCacheService type
type TTLCacheService[K comparable, V interface{}] struct {
	mock.Mock
}

type TTLCacheService_Expecter[K comparable, V interface{}] struct {
	mock *mock.Mock
}

func (_m *TTLCacheService[K, V]) EXPECT() *TTLCacheService_Expecter[K, V] {
	return &TTLCacheService_Expecter[K, V]{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: key
func (_m *TTLCacheService[K, V]) Delete(key K) {
	_m.Called(key)
}

// TTLCacheService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TTLCacheService_Delete_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key K
func (_e *TTLCacheService_Expecter[K, V]) Delete(key interface{}) *TTLCacheService_Delete_Call[K, V] {
	return &TTLCacheService_Delete_Call[K, V]{Call: _e.mock.On("Delete", key)}
}

func (_c *TTLCacheService_Delete_Call[K, V]) Run(run func(key K)) *TTLCacheService_Delete_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *TTLCacheService_Delete_Call[K, V]) Return() *TTLCacheService_Delete_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *TTLCacheService_Delete_Call[K, V]) RunAndReturn(run func(K)) *TTLCacheService_Delete_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// DeleteAll provides a mock function with given fields:
func (_m *TTLCacheService[K, V]) DeleteAll() {
	_m.Called()
}

// TTLCacheService_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type TTLCacheService_DeleteAll_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
func (_e *TTLCacheService_Expecter[K, V]) DeleteAll() *TTLCacheService_DeleteAll_Call[K, V] {
	return &TTLCacheService_DeleteAll_Call[K, V]{Call: _e.mock.On("DeleteAll")}
}

func (_c *TTLCacheService_DeleteAll_Call[K, V]) Run(run func()) *TTLCacheService_DeleteAll_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TTLCacheService_DeleteAll_Call[K, V]) Return() *TTLCacheService_DeleteAll_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *TTLCacheService_DeleteAll_Call[K, V]) RunAndReturn(run func()) *TTLCacheService_DeleteAll_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// DeleteExpired provides a mock function with given fields:
func (_m *TTLCacheService[K, V]) DeleteExpired() {
	_m.Called()
}

// TTLCacheService_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type TTLCacheService_DeleteExpired_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
func (_e *TTLCacheService_Expecter[K, V]) DeleteExpired() *TTLCacheService_DeleteExpired_Call[K, V] {
	return &TTLCacheService_DeleteExpired_Call[K, V]{Call: _e.mock.On("DeleteExpired")}
}

func (_c *TTLCacheService_DeleteExpired_Call[K, V]) Run(run func()) *TTLCacheService_DeleteExpired_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TTLCacheService_DeleteExpired_Call[K, V]) Return() *TTLCacheService_DeleteExpired_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *TTLCacheService_DeleteExpired_Call[K, V]) RunAndReturn(run func()) *TTLCacheService_DeleteExpired_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key, opts
func (_m *TTLCacheService[K, V]) Get(key K, opts ttlcache.Option[K, V]) *ttlcache.Item[K, V] {
	ret := _m.Called(key, opts)

	var r0 *ttlcache.Item[K, V]
	if rf, ok := ret.Get(0).(func(K, ttlcache.Option[K, V]) *ttlcache.Item[K, V]); ok {
		r0 = rf(key, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ttlcache.Item[K, V])
		}
	}

	return r0
}

// TTLCacheService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TTLCacheService_Get_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key K
//   - opts ttlcache.Option[K,V]
func (_e *TTLCacheService_Expecter[K, V]) Get(key interface{}, opts interface{}) *TTLCacheService_Get_Call[K, V] {
	return &TTLCacheService_Get_Call[K, V]{Call: _e.mock.On("Get", key, opts)}
}

func (_c *TTLCacheService_Get_Call[K, V]) Run(run func(key K, opts ttlcache.Option[K, V])) *TTLCacheService_Get_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K), args[1].(ttlcache.Option[K, V]))
	})
	return _c
}

func (_c *TTLCacheService_Get_Call[K, V]) Return(_a0 *ttlcache.Item[K, V]) *TTLCacheService_Get_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_Get_Call[K, V]) RunAndReturn(run func(K, ttlcache.Option[K, V]) *ttlcache.Item[K, V]) *TTLCacheService_Get_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetAndDelete provides a mock function with given fields: key, opts
func (_m *TTLCacheService[K, V]) GetAndDelete(key K, opts ttlcache.Option[K, V]) (*ttlcache.Item[K, V], bool) {
	ret := _m.Called(key, opts)

	var r0 *ttlcache.Item[K, V]
	var r1 bool
	if rf, ok := ret.Get(0).(func(K, ttlcache.Option[K, V]) (*ttlcache.Item[K, V], bool)); ok {
		return rf(key, opts)
	}
	if rf, ok := ret.Get(0).(func(K, ttlcache.Option[K, V]) *ttlcache.Item[K, V]); ok {
		r0 = rf(key, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ttlcache.Item[K, V])
		}
	}

	if rf, ok := ret.Get(1).(func(K, ttlcache.Option[K, V]) bool); ok {
		r1 = rf(key, opts)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// TTLCacheService_GetAndDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAndDelete'
type TTLCacheService_GetAndDelete_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// GetAndDelete is a helper method to define mock.On call
//   - key K
//   - opts ttlcache.Option[K,V]
func (_e *TTLCacheService_Expecter[K, V]) GetAndDelete(key interface{}, opts interface{}) *TTLCacheService_GetAndDelete_Call[K, V] {
	return &TTLCacheService_GetAndDelete_Call[K, V]{Call: _e.mock.On("GetAndDelete", key, opts)}
}

func (_c *TTLCacheService_GetAndDelete_Call[K, V]) Run(run func(key K, opts ttlcache.Option[K, V])) *TTLCacheService_GetAndDelete_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K), args[1].(ttlcache.Option[K, V]))
	})
	return _c
}

func (_c *TTLCacheService_GetAndDelete_Call[K, V]) Return(_a0 *ttlcache.Item[K, V], _a1 bool) *TTLCacheService_GetAndDelete_Call[K, V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TTLCacheService_GetAndDelete_Call[K, V]) RunAndReturn(run func(K, ttlcache.Option[K, V]) (*ttlcache.Item[K, V], bool)) *TTLCacheService_GetAndDelete_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetOrSet provides a mock function with given fields: key, value, opts
func (_m *TTLCacheService[K, V]) GetOrSet(key K, value V, opts ttlcache.Option[K, V]) (*ttlcache.Item[K, V], bool) {
	ret := _m.Called(key, value, opts)

	var r0 *ttlcache.Item[K, V]
	var r1 bool
	if rf, ok := ret.Get(0).(func(K, V, ttlcache.Option[K, V]) (*ttlcache.Item[K, V], bool)); ok {
		return rf(key, value, opts)
	}
	if rf, ok := ret.Get(0).(func(K, V, ttlcache.Option[K, V]) *ttlcache.Item[K, V]); ok {
		r0 = rf(key, value, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ttlcache.Item[K, V])
		}
	}

	if rf, ok := ret.Get(1).(func(K, V, ttlcache.Option[K, V]) bool); ok {
		r1 = rf(key, value, opts)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// TTLCacheService_GetOrSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrSet'
type TTLCacheService_GetOrSet_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// GetOrSet is a helper method to define mock.On call
//   - key K
//   - value V
//   - opts ttlcache.Option[K,V]
func (_e *TTLCacheService_Expecter[K, V]) GetOrSet(key interface{}, value interface{}, opts interface{}) *TTLCacheService_GetOrSet_Call[K, V] {
	return &TTLCacheService_GetOrSet_Call[K, V]{Call: _e.mock.On("GetOrSet", key, value, opts)}
}

func (_c *TTLCacheService_GetOrSet_Call[K, V]) Run(run func(key K, value V, opts ttlcache.Option[K, V])) *TTLCacheService_GetOrSet_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K), args[1].(V), args[2].(ttlcache.Option[K, V]))
	})
	return _c
}

func (_c *TTLCacheService_GetOrSet_Call[K, V]) Return(_a0 *ttlcache.Item[K, V], _a1 bool) *TTLCacheService_GetOrSet_Call[K, V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TTLCacheService_GetOrSet_Call[K, V]) RunAndReturn(run func(K, V, ttlcache.Option[K, V]) (*ttlcache.Item[K, V], bool)) *TTLCacheService_GetOrSet_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: key
func (_m *TTLCacheService[K, V]) Has(key K) bool {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(K) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TTLCacheService_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type TTLCacheService_Has_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key K
func (_e *TTLCacheService_Expecter[K, V]) Has(key interface{}) *TTLCacheService_Has_Call[K, V] {
	return &TTLCacheService_Has_Call[K, V]{Call: _e.mock.On("Has", key)}
}

func (_c *TTLCacheService_Has_Call[K, V]) Run(run func(key K)) *TTLCacheService_Has_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *TTLCacheService_Has_Call[K, V]) Return(_a0 bool) *TTLCacheService_Has_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_Has_Call[K, V]) RunAndReturn(run func(K) bool) *TTLCacheService_Has_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Items provides a mock function with given fields:
func (_m *TTLCacheService[K, V]) Items() map[K]*ttlcache.Item[K, V] {
	ret := _m.Called()

	var r0 map[K]*ttlcache.Item[K, V]
	if rf, ok := ret.Get(0).(func() map[K]*ttlcache.Item[K, V]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[K]*ttlcache.Item[K, V])
		}
	}

	return r0
}

// TTLCacheService_Items_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Items'
type TTLCacheService_Items_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Items is a helper method to define mock.On call
func (_e *TTLCacheService_Expecter[K, V]) Items() *TTLCacheService_Items_Call[K, V] {
	return &TTLCacheService_Items_Call[K, V]{Call: _e.mock.On("Items")}
}

func (_c *TTLCacheService_Items_Call[K, V]) Run(run func()) *TTLCacheService_Items_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TTLCacheService_Items_Call[K, V]) Return(_a0 map[K]*ttlcache.Item[K, V]) *TTLCacheService_Items_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_Items_Call[K, V]) RunAndReturn(run func() map[K]*ttlcache.Item[K, V]) *TTLCacheService_Items_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function with given fields:
func (_m *TTLCacheService[K, V]) Keys() []K {
	ret := _m.Called()

	var r0 []K
	if rf, ok := ret.Get(0).(func() []K); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]K)
		}
	}

	return r0
}

// TTLCacheService_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type TTLCacheService_Keys_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
func (_e *TTLCacheService_Expecter[K, V]) Keys() *TTLCacheService_Keys_Call[K, V] {
	return &TTLCacheService_Keys_Call[K, V]{Call: _e.mock.On("Keys")}
}

func (_c *TTLCacheService_Keys_Call[K, V]) Run(run func()) *TTLCacheService_Keys_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TTLCacheService_Keys_Call[K, V]) Return(_a0 []K) *TTLCacheService_Keys_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_Keys_Call[K, V]) RunAndReturn(run func() []K) *TTLCacheService_Keys_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *TTLCacheService[K, V]) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TTLCacheService_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type TTLCacheService_Len_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *TTLCacheService_Expecter[K, V]) Len() *TTLCacheService_Len_Call[K, V] {
	return &TTLCacheService_Len_Call[K, V]{Call: _e.mock.On("Len")}
}

func (_c *TTLCacheService_Len_Call[K, V]) Run(run func()) *TTLCacheService_Len_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TTLCacheService_Len_Call[K, V]) Return(_a0 int) *TTLCacheService_Len_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_Len_Call[K, V]) RunAndReturn(run func() int) *TTLCacheService_Len_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Metrics provides a mock function with given fields:
func (_m *TTLCacheService[K, V]) Metrics() ttlcache.Metrics {
	ret := _m.Called()

	var r0 ttlcache.Metrics
	if rf, ok := ret.Get(0).(func() ttlcache.Metrics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ttlcache.Metrics)
	}

	return r0
}

// TTLCacheService_Metrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metrics'
type TTLCacheService_Metrics_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Metrics is a helper method to define mock.On call
func (_e *TTLCacheService_Expecter[K, V]) Metrics() *TTLCacheService_Metrics_Call[K, V] {
	return &TTLCacheService_Metrics_Call[K, V]{Call: _e.mock.On("Metrics")}
}

func (_c *TTLCacheService_Metrics_Call[K, V]) Run(run func()) *TTLCacheService_Metrics_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TTLCacheService_Metrics_Call[K, V]) Return(_a0 ttlcache.Metrics) *TTLCacheService_Metrics_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_Metrics_Call[K, V]) RunAndReturn(run func() ttlcache.Metrics) *TTLCacheService_Metrics_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: opts
func (_m *TTLCacheService[K, V]) New(opts ...ttlcache.Option[K, V]) *ttlcache.Cache[K, V] {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ttlcache.Cache[K, V]
	if rf, ok := ret.Get(0).(func(...ttlcache.Option[K, V]) *ttlcache.Cache[K, V]); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ttlcache.Cache[K, V])
		}
	}

	return r0
}

// TTLCacheService_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type TTLCacheService_New_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - opts ...ttlcache.Option[K,V]
func (_e *TTLCacheService_Expecter[K, V]) New(opts ...interface{}) *TTLCacheService_New_Call[K, V] {
	return &TTLCacheService_New_Call[K, V]{Call: _e.mock.On("New",
		append([]interface{}{}, opts...)...)}
}

func (_c *TTLCacheService_New_Call[K, V]) Run(run func(opts ...ttlcache.Option[K, V])) *TTLCacheService_New_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ttlcache.Option[K, V], len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(ttlcache.Option[K, V])
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *TTLCacheService_New_Call[K, V]) Return(_a0 *ttlcache.Cache[K, V]) *TTLCacheService_New_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_New_Call[K, V]) RunAndReturn(run func(...ttlcache.Option[K, V]) *ttlcache.Cache[K, V]) *TTLCacheService_New_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// OnEviction provides a mock function with given fields: fn
func (_m *TTLCacheService[K, V]) OnEviction(fn func(context.Context, ttlcache.EvictionReason, *ttlcache.Item[K, V])) func() {
	ret := _m.Called(fn)

	var r0 func()
	if rf, ok := ret.Get(0).(func(func(context.Context, ttlcache.EvictionReason, *ttlcache.Item[K, V])) func()); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// TTLCacheService_OnEviction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnEviction'
type TTLCacheService_OnEviction_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// OnEviction is a helper method to define mock.On call
//   - fn func(context.Context , ttlcache.EvictionReason , *ttlcache.Item[K,V])
func (_e *TTLCacheService_Expecter[K, V]) OnEviction(fn interface{}) *TTLCacheService_OnEviction_Call[K, V] {
	return &TTLCacheService_OnEviction_Call[K, V]{Call: _e.mock.On("OnEviction", fn)}
}

func (_c *TTLCacheService_OnEviction_Call[K, V]) Run(run func(fn func(context.Context, ttlcache.EvictionReason, *ttlcache.Item[K, V]))) *TTLCacheService_OnEviction_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, ttlcache.EvictionReason, *ttlcache.Item[K, V])))
	})
	return _c
}

func (_c *TTLCacheService_OnEviction_Call[K, V]) Return(_a0 func()) *TTLCacheService_OnEviction_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_OnEviction_Call[K, V]) RunAndReturn(run func(func(context.Context, ttlcache.EvictionReason, *ttlcache.Item[K, V])) func()) *TTLCacheService_OnEviction_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// OnInsertion provides a mock function with given fields: fn
func (_m *TTLCacheService[K, V]) OnInsertion(fn func(context.Context, *ttlcache.Item[K, V])) func() {
	ret := _m.Called(fn)

	var r0 func()
	if rf, ok := ret.Get(0).(func(func(context.Context, *ttlcache.Item[K, V])) func()); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// TTLCacheService_OnInsertion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnInsertion'
type TTLCacheService_OnInsertion_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// OnInsertion is a helper method to define mock.On call
//   - fn func(context.Context , *ttlcache.Item[K,V])
func (_e *TTLCacheService_Expecter[K, V]) OnInsertion(fn interface{}) *TTLCacheService_OnInsertion_Call[K, V] {
	return &TTLCacheService_OnInsertion_Call[K, V]{Call: _e.mock.On("OnInsertion", fn)}
}

func (_c *TTLCacheService_OnInsertion_Call[K, V]) Run(run func(fn func(context.Context, *ttlcache.Item[K, V]))) *TTLCacheService_OnInsertion_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, *ttlcache.Item[K, V])))
	})
	return _c
}

func (_c *TTLCacheService_OnInsertion_Call[K, V]) Return(_a0 func()) *TTLCacheService_OnInsertion_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_OnInsertion_Call[K, V]) RunAndReturn(run func(func(context.Context, *ttlcache.Item[K, V])) func()) *TTLCacheService_OnInsertion_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Range provides a mock function with given fields: fn
func (_m *TTLCacheService[K, V]) Range(fn func(*ttlcache.Item[K, V]) bool) {
	_m.Called(fn)
}

// TTLCacheService_Range_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Range'
type TTLCacheService_Range_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Range is a helper method to define mock.On call
//   - fn func(*ttlcache.Item[K,V]) bool
func (_e *TTLCacheService_Expecter[K, V]) Range(fn interface{}) *TTLCacheService_Range_Call[K, V] {
	return &TTLCacheService_Range_Call[K, V]{Call: _e.mock.On("Range", fn)}
}

func (_c *TTLCacheService_Range_Call[K, V]) Run(run func(fn func(*ttlcache.Item[K, V]) bool)) *TTLCacheService_Range_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*ttlcache.Item[K, V]) bool))
	})
	return _c
}

func (_c *TTLCacheService_Range_Call[K, V]) Return() *TTLCacheService_Range_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *TTLCacheService_Range_Call[K, V]) RunAndReturn(run func(func(*ttlcache.Item[K, V]) bool)) *TTLCacheService_Range_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value, ttl
func (_m *TTLCacheService[K, V]) Set(key K, value V, ttl time.Duration) *ttlcache.Item[K, V] {
	ret := _m.Called(key, value, ttl)

	var r0 *ttlcache.Item[K, V]
	if rf, ok := ret.Get(0).(func(K, V, time.Duration) *ttlcache.Item[K, V]); ok {
		r0 = rf(key, value, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ttlcache.Item[K, V])
		}
	}

	return r0
}

// TTLCacheService_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type TTLCacheService_Set_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key K
//   - value V
//   - ttl time.Duration
func (_e *TTLCacheService_Expecter[K, V]) Set(key interface{}, value interface{}, ttl interface{}) *TTLCacheService_Set_Call[K, V] {
	return &TTLCacheService_Set_Call[K, V]{Call: _e.mock.On("Set", key, value, ttl)}
}

func (_c *TTLCacheService_Set_Call[K, V]) Run(run func(key K, value V, ttl time.Duration)) *TTLCacheService_Set_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K), args[1].(V), args[2].(time.Duration))
	})
	return _c
}

func (_c *TTLCacheService_Set_Call[K, V]) Return(_a0 *ttlcache.Item[K, V]) *TTLCacheService_Set_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_Set_Call[K, V]) RunAndReturn(run func(K, V, time.Duration) *ttlcache.Item[K, V]) *TTLCacheService_Set_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *TTLCacheService[K, V]) Start() {
	_m.Called()
}

// TTLCacheService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type TTLCacheService_Start_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *TTLCacheService_Expecter[K, V]) Start() *TTLCacheService_Start_Call[K, V] {
	return &TTLCacheService_Start_Call[K, V]{Call: _e.mock.On("Start")}
}

func (_c *TTLCacheService_Start_Call[K, V]) Run(run func()) *TTLCacheService_Start_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TTLCacheService_Start_Call[K, V]) Return() *TTLCacheService_Start_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *TTLCacheService_Start_Call[K, V]) RunAndReturn(run func()) *TTLCacheService_Start_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *TTLCacheService[K, V]) Stop() {
	_m.Called()
}

// TTLCacheService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type TTLCacheService_Stop_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *TTLCacheService_Expecter[K, V]) Stop() *TTLCacheService_Stop_Call[K, V] {
	return &TTLCacheService_Stop_Call[K, V]{Call: _e.mock.On("Stop")}
}

func (_c *TTLCacheService_Stop_Call[K, V]) Run(run func()) *TTLCacheService_Stop_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TTLCacheService_Stop_Call[K, V]) Return() *TTLCacheService_Stop_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *TTLCacheService_Stop_Call[K, V]) RunAndReturn(run func()) *TTLCacheService_Stop_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Touch provides a mock function with given fields: key
func (_m *TTLCacheService[K, V]) Touch(key K) {
	_m.Called(key)
}

// TTLCacheService_Touch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Touch'
type TTLCacheService_Touch_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Touch is a helper method to define mock.On call
//   - key K
func (_e *TTLCacheService_Expecter[K, V]) Touch(key interface{}) *TTLCacheService_Touch_Call[K, V] {
	return &TTLCacheService_Touch_Call[K, V]{Call: _e.mock.On("Touch", key)}
}

func (_c *TTLCacheService_Touch_Call[K, V]) Run(run func(key K)) *TTLCacheService_Touch_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *TTLCacheService_Touch_Call[K, V]) Return() *TTLCacheService_Touch_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *TTLCacheService_Touch_Call[K, V]) RunAndReturn(run func(K)) *TTLCacheService_Touch_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// NewTTLCacheService creates a new instance of TTLCacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTTLCacheService[K comparable, V interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *TTLCacheService[K, V] {
	mock := &TTLCacheService[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
