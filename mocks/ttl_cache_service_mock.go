// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	ttlcache "github.com/jellydator/ttlcache/v3"
)

// TTLCacheService is an autogenerated mock type for the TTLCacheService type
type TTLCacheService[K comparable, V interface{}] struct {
	mock.Mock
}

type TTLCacheService_Expecter[K comparable, V interface{}] struct {
	mock *mock.Mock
}

func (_m *TTLCacheService[K, V]) EXPECT() *TTLCacheService_Expecter[K, V] {
	return &TTLCacheService_Expecter[K, V]{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *TTLCacheService[K, V]) Get(key K) *ttlcache.Item[K, V] {
	ret := _m.Called(key)

	var r0 *ttlcache.Item[K, V]
	if rf, ok := ret.Get(0).(func(K) *ttlcache.Item[K, V]); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ttlcache.Item[K, V])
		}
	}

	return r0
}

// TTLCacheService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TTLCacheService_Get_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key K
func (_e *TTLCacheService_Expecter[K, V]) Get(key interface{}) *TTLCacheService_Get_Call[K, V] {
	return &TTLCacheService_Get_Call[K, V]{Call: _e.mock.On("Get", key)}
}

func (_c *TTLCacheService_Get_Call[K, V]) Run(run func(key K)) *TTLCacheService_Get_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *TTLCacheService_Get_Call[K, V]) Return(_a0 *ttlcache.Item[K, V]) *TTLCacheService_Get_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_Get_Call[K, V]) RunAndReturn(run func(K) *ttlcache.Item[K, V]) *TTLCacheService_Get_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value, ttl
func (_m *TTLCacheService[K, V]) Set(key K, value V, ttl time.Duration) *ttlcache.Item[K, V] {
	ret := _m.Called(key, value, ttl)

	var r0 *ttlcache.Item[K, V]
	if rf, ok := ret.Get(0).(func(K, V, time.Duration) *ttlcache.Item[K, V]); ok {
		r0 = rf(key, value, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ttlcache.Item[K, V])
		}
	}

	return r0
}

// TTLCacheService_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type TTLCacheService_Set_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key K
//   - value V
//   - ttl time.Duration
func (_e *TTLCacheService_Expecter[K, V]) Set(key interface{}, value interface{}, ttl interface{}) *TTLCacheService_Set_Call[K, V] {
	return &TTLCacheService_Set_Call[K, V]{Call: _e.mock.On("Set", key, value, ttl)}
}

func (_c *TTLCacheService_Set_Call[K, V]) Run(run func(key K, value V, ttl time.Duration)) *TTLCacheService_Set_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K), args[1].(V), args[2].(time.Duration))
	})
	return _c
}

func (_c *TTLCacheService_Set_Call[K, V]) Return(_a0 *ttlcache.Item[K, V]) *TTLCacheService_Set_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TTLCacheService_Set_Call[K, V]) RunAndReturn(run func(K, V, time.Duration) *ttlcache.Item[K, V]) *TTLCacheService_Set_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *TTLCacheService[K, V]) Start() {
	_m.Called()
}

// TTLCacheService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type TTLCacheService_Start_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *TTLCacheService_Expecter[K, V]) Start() *TTLCacheService_Start_Call[K, V] {
	return &TTLCacheService_Start_Call[K, V]{Call: _e.mock.On("Start")}
}

func (_c *TTLCacheService_Start_Call[K, V]) Run(run func()) *TTLCacheService_Start_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TTLCacheService_Start_Call[K, V]) Return() *TTLCacheService_Start_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *TTLCacheService_Start_Call[K, V]) RunAndReturn(run func()) *TTLCacheService_Start_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// NewTTLCacheService creates a new instance of TTLCacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTTLCacheService[K comparable, V interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *TTLCacheService[K, V] {
	mock := &TTLCacheService[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
